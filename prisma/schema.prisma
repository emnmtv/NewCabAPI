generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:@localhost:3306/NCNHS-EXAM"
}

model User {
  id           Int      @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String   @unique
  password     String
  phone        String?  // Optional
  address      String?  // Optional
  role         String   // 'student', 'teacher', 'admin'
  lrn          String?  @unique  // Optional, for students only
  gradeLevel   Int?     // Optional, for students only
  section      String?  // Optional, for students only
  domain       String?  // Optional, for teachers only
  department   String?  // Optional, for teachers only
  profilePicture String? // Optional profile picture URL
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  examAnswers  ExamAnswer[] // Relation to ExamAnswer
  exams        Exam[] // Add this line to define the relation to Exam
  scores       Score[]  // Add this line
  surveys      Survey[]    // Add surveys relation
  subjects     TeacherSubject[] // Add this line
  tasks        SubjectTask[]
  submissions TaskSubmission[]
  taskVisibility TaskVisibility[]
  questionBank QuestionBank[]
  questionBankFolders QuestionBankFolder[]
}

model Question {
  id            Int      @id @default(autoincrement())
  examId        Int
  questionText  String
  questionType  String
  options       Json     // Use Json type to store an array of options
  correctAnswer String
  imageUrl      String?  // Add this field for storing image URLs
  exam          Exam     @relation(fields: [examId], references: [id])
  examAnswers   ExamAnswer[] // Add this line to define the opposite relation
}

model Exam {
  id            Int           @id @default(autoincrement())
  testCode      String        @unique
  classCode     String
  examTitle     String
  status        String        @default("draft") // Update default to "draft"
  isDraft       Boolean       @default(true)    // Add this field
  questions     Question[]    
  examAnswers   ExamAnswer[]  
  userId        Int           // Add userId field to relate to User
  user          User          @relation(fields: [userId], references: [id]) // Define relation to User
  scores        Score[]       // Add this line
  createdAt     DateTime      @default(now())   // Add this field
  updatedAt     DateTime      @updatedAt        // Add this field
  access        ExamAccess[]
}

model ExamAnswer {
  id           Int      @id @default(autoincrement())
  examId       Int
  questionId   Int
  userAnswer   String
  isCorrect    Boolean
  submittedAt  DateTime @default(now())
  userId       Int // Add the userId field here
  user         User     @relation(fields: [userId], references: [id]) // Add relation to User model
  exam         Exam     @relation(fields: [examId], references: [id])
  question     Question @relation(fields: [questionId], references: [id])
  @@unique([examId, userId, questionId])  // Composite unique key
}

model Score {
  id        Int      @id @default(autoincrement())
  userId    Int
  examId    Int
  score     Int
  total     Int
  percentage Float
  submittedAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  exam      Exam     @relation(fields: [examId], references: [id])
  
  @@unique([userId, examId])
}

model Survey {
  id          Int           @id @default(autoincrement())
  title       String
  description String?
  code        String       @unique // Survey access code
  isActive    Boolean      @default(true)
  userId      Int          // Add userId field
  user        User         @relation(fields: [userId], references: [id]) // Add relation to User
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  questions   SurveyQuestion[]
  responses   SurveyResponse[]
}

model SurveyQuestion {
  id          Int      @id @default(autoincrement())
  surveyId    Int
  questionText String
  questionType String  // 'multiple_choice', 'text', 'rating'
  options     Json?    // For multiple choice questions
  required    Boolean  @default(true)
  order       Int      // Question order in survey
  survey      Survey   @relation(fields: [surveyId], references: [id])
  answers     SurveyAnswer[]
}

model SurveyResponse {
  id          Int      @id @default(autoincrement())
  surveyId    Int
  respondent  String?  // Optional respondent identifier
  createdAt   DateTime @default(now())
  survey      Survey   @relation(fields: [surveyId], references: [id])
  answers     SurveyAnswer[]
}

model SurveyAnswer {
  id              Int            @id @default(autoincrement())
  responseId      Int
  questionId      Int
  answer          String
  response        SurveyResponse @relation(fields: [responseId], references: [id])
  question        SurveyQuestion @relation(fields: [questionId], references: [id])
}

model GradeSection {
  id        Int      @id @default(autoincrement())
  grade     Int
  section   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([grade, section]) // Ensure unique combination of grade and section
}

model ExamAccess {
  id        Int      @id @default(autoincrement())
  examId    Int
  grade     Int
  section   String
  isEnabled Boolean  @default(true)
  exam      Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@unique([examId, grade, section])
}

model Subject {
  id           Int               @id @default(autoincrement())
  name         String
  description  String?
  code         String            @unique
  scheduleType String?           // 'SINGLE', 'RANGE', 'MULTIPLE'
  daysOfWeek   Json?             // Store the days as a JSON array
  startTime    String?           // Store time as HH:mm format
  endTime      String?           // Store time as HH:mm format
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  teachers     TeacherSubject[]
  sections     SectionSubject[]
  tasks        SubjectTask[]
}

model TeacherSubject {
  id        Int      @id @default(autoincrement())
  teacherId Int
  subjectId Int
  user      User     @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teacherId, subjectId])
}

model SectionSubject {
  id        Int      @id @default(autoincrement())
  grade     Int
  section   String
  subjectId Int
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([grade, section, subjectId])


}

model SubjectTask {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  dueDate     DateTime
  totalScore  Int
  subjectId   Int
  teacherId   Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  visibleTo   TaskVisibility[]
  files       TaskFile[]
  
  subject     Subject   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher     User      @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  submissions TaskSubmission[]
}

model TaskSubmission {
  id          Int        @id @default(autoincrement())
  taskId      Int
  studentId   Int
  submittedAt DateTime   @default(now())
  score       Int?
  comment     String?
  files       TaskFile[]
  
  task        SubjectTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  student     User        @relation(fields: [studentId], references: [id], onDelete: Cascade)
}

model TaskVisibility {
  id        Int      @id @default(autoincrement())
  taskId    Int
  studentId Int      // Using student ID instead of LRN for foreign key relationship
  task      SubjectTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([taskId, studentId])
}

model TaskFile {
  id           Int            @id @default(autoincrement())
  fileUrl      String
  fileName     String
  taskId       Int?
  submissionId Int?
  task         SubjectTask?   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  submission   TaskSubmission? @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
}

model QuestionBankFolder {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  createdBy     Int
  user          User          @relation(fields: [createdBy], references: [id])
  questions     QuestionBank[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model QuestionBank {
  id            Int      @id @default(autoincrement())
  questionText  String
  questionType  String
  options       Json     // Store options as JSON array
  correctAnswer String
  imageUrl      String?  // Optional image URL
  subject       String?  // Subject/topic this question belongs to
  folderId      Int?     // Make it optional
  folder        QuestionBankFolder? @relation(fields: [folderId], references: [id])
  difficulty    String   // 'easy', 'medium', 'hard'
  createdBy     Int      // Teacher who created the question
  user          User     @relation(fields: [createdBy], references: [id])
  sourceTestCode String? // Source exam test code
  sourceClassCode String? // Source exam class code
  sourceExamTitle String? // Source exam title
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ComponentSettings {
  id            Int      @id @default(autoincrement())
  role          String   // 'student', 'teacher', 'admin'
  componentPath String   // Route path of the component
  componentName String   // Display name of the component
  isEnabled     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([role, componentPath])
}


